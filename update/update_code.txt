#include <boost/asio.hpp>              // For networking (TCP sockets, resolver)
#include <boost/asio/ssl.hpp>          // For SSL/TLS support (HTTPS requests)
#include <boost/algorithm/string.hpp>  // For boost::algorithm::trim (string trimming)
#include <boost/system/error_code.hpp> // For boost::system::error_code (error handling)

#include <windows.h>                   // For MessageBoxA, CreateFileA, ShellExecuteA, etc.
#include <shlwapi.h>                   // For PathFileExistsA
#include <shellapi.h>                  // For ShellExecuteA

#include <iostream>                    // For std::cout
#include <string>                      // For std::string
#include <sstream>                     // For std::ostringstream
#include <regex>                       // For std::regex
#include <cstdlib>                     // For std::system
#include <stdio.h>                     // For popen, pclose

#pragma comment(lib, "Shlwapi.lib")

#ifdef _WIN32
#define popen _popen
#define pclose _pclose
#endif

// Function prototype for showMessage
void showMessage(const std::string& msg, const std::string& title);

std::string GetVersionName(std::string& outOnlineVersion) {
    boost::asio::io_context io_context;
    boost::asio::ssl::context ssl_context(boost::asio::ssl::context::sslv23_client);
    ssl_context.set_default_verify_paths(); // Use system CA certificates

    boost::asio::ssl::stream<boost::asio::ip::tcp::socket> ssl_socket(io_context, ssl_context);
    const std::string host = "raw.githubusercontent.com";
    const std::string path = "/Mester-Oxdan/Oxdan-Dragon-Python/main/version";

    // Resolve DNS and connect
    boost::asio::ip::tcp::resolver resolver(io_context);
    auto endpoints = resolver.resolve(host, "443");
    boost::asio::connect(ssl_socket.next_layer(), endpoints);

    ssl_socket.handshake(boost::asio::ssl::stream_base::client);

    // Form the HTTPS GET request
    std::string request =
        "GET " + path + " HTTP/1.1\r\n"
        "Host: " + host + "\r\n"
        "User-Agent: UpdateChecker\r\n"
        "Connection: close\r\n\r\n";

    boost::asio::write(ssl_socket, boost::asio::buffer(request));

    // Read response headers
    boost::asio::streambuf response_buffer;
    boost::asio::read_until(ssl_socket, response_buffer, "\r\n\r\n");

    // Check HTTP status
    std::istream response_stream(&response_buffer);
    std::string http_version;
    unsigned int status_code;
    std::string status_message;

    response_stream >> http_version >> status_code;
    std::getline(response_stream, status_message);
    if (!response_stream || http_version.substr(0, 5) != "HTTP/") {
        showMessage("Invalid HTTP response", "Web Response Invalid");
    }

    // Read the body
    std::ostringstream oss;
    oss << &response_buffer;

    boost::system::error_code ec;
    while (boost::asio::read(ssl_socket, response_buffer, boost::asio::transfer_at_least(1), ec)) {
        oss << &response_buffer;
    }
    if (ec != boost::asio::error::eof && ec) {
        throw boost::system::system_error(ec);
    }

    std::string full_response = oss.str();
    std::size_t header_end = full_response.find("\r\n\r\n");
    if (header_end == std::string::npos) {
        showMessage("Failed to parse HTTP headers", "Web Response Invalid");
    }

    std::string body = full_response.substr(header_end + 4);
    boost::algorithm::trim(body);
    outOnlineVersion = body;

    // Validate version string
    std::regex version_regex(R"(\d+\.\d+)");
    if (!std::regex_match(outOnlineVersion, version_regex)) {
        showMessage("Received invalid version format", "Web Response Invalid");
    }

    return outOnlineVersion;
}

// Configuration
std::string onlineVersion;
std::string repoURL = "https://github.com/Mester-Oxdan/Oxdan-Dragon-Python.git";
std::string tempCloneDir = "..\\CONSOLE-OXDAN-DRAGON-PYTHON-" + GetVersionName(onlineVersion);
std::string mainExePath_2 = tempCloneDir + "\\CONSOLE-OXDAN-DRAGON-PYTHON\\CONSOLE-OXDAN-DRAGON-PYTHON.exe";
//std::string appFolder = "..\\CONSOLE-OXDAN-DRAGON-PYTHON";

// GUI helpers
void showMessage(const std::string& msg, const std::string& title) {
    MessageBoxA(NULL, msg.c_str(), title.c_str(), MB_OK | MB_ICONEXCLAMATION);
}

// Git Check
bool isGitInstalled() {
    FILE* pipe = popen("git --version", "r");
    if (!pipe) return false;

    char buffer[128];
    std::string result;

    while (fgets(buffer, sizeof(buffer), pipe) != nullptr) {
        result += buffer;
    }

    auto exitCode = pclose(pipe);
    return (exitCode == 0 && !result.empty());
}

// Lock Checkers
bool isFolderLocked(const std::string& path) {
    std::string tempName = path + "_locktest";
    if (MoveFileA(path.c_str(), tempName.c_str())) {
        MoveFileA(tempName.c_str(), path.c_str());
        return false;
    }
    DWORD err = GetLastError();
    return (err == ERROR_ACCESS_DENIED || err == ERROR_SHARING_VIOLATION);
}

// Helper: Get Absolute Path
std::string getAbsolutePath(const std::string& path) {
    char absPath[MAX_PATH];
    if (GetFullPathNameA(path.c_str(), MAX_PATH, absPath, nullptr)) {
        return std::string(absPath);
    }
    return path;
}

// Folder Deletion (using system command)
void deleteFolder(const std::string& folderPath) {
    std::string cmd = "rmdir /s /q \"" + folderPath + "\"";
    std::system(cmd.c_str());
}

// Main
int main() {
    // Step 1: Check if Git is installed, install if not
    if (!isGitInstalled()) {
        showMessage("Git is not installed. Launching Git installer...", "Git Missing");
        // Run git.exe installer and wait for it to complete
        if (ShellExecuteA(NULL, "open", "git.exe", NULL, NULL, SW_SHOWNORMAL) <= (HINSTANCE)32) {
            showMessage("Failed to launch Git installer. Please install Git manually and restart the updater.", "Git Install Failed");
            return 1;
        }
        // Wait for the installer to finish (optional, depending on installer behavior)
        Sleep(1000); // Brief delay to ensure installer starts
        showMessage("Git installed. Please restart the updater.", "Install Complete");
        return 1;
    }

    // Step 2: Clone the repository
    std::string cmd = "git clone --depth 1 -c core.longpaths=true " + repoURL + " \"" + tempCloneDir + "\"";
    if (std::system(cmd.c_str()) != 0) {
        showMessage("Failed to clone repository from GitHub. Check your internet connection or repository URL.", "Clone Failed");
        return 1;
    }

    std::string msg = "Sorry but we cant delete old version, please delete manually it by your self";
    showMessage(msg, "Delete Failed");

    // Step 5: Launch new version
    if (ShellExecuteA(NULL, "open", mainExePath_2.c_str(), NULL, NULL, SW_SHOWNORMAL) <= (HINSTANCE)32) {
        showMessage("Failed to launch the new version. Please check the path:\n" + mainExePath_2, "Launch Failed");
        return 1;
    }

    return 0;
}